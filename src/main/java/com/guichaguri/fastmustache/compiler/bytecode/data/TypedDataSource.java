package com.guichaguri.fastmustache.compiler.bytecode.data;

import com.guichaguri.fastmustache.template.MustacheType;
import com.guichaguri.fastmustache.template.TemplateData;
import java.util.Map;

/**
 * Generates the bytecode that gets data from a key using the {@link TemplateData} methods.
 *
 * It also allows the bytecode generator to insert a faster code for Mustache sections depending on its type.
 *
 * The generated bytecode is faster than {@link SimpleDataSource} for the properties with types defined
 *
 * @author Guichaguri
 */
public class TypedDataSource extends SimpleDataSource {

    private final Map<String, MustacheType> types;

    public TypedDataSource(Map<String, MustacheType> types) {
        this.types = types;
    }

    @Override
    public MustacheType getType(DataSourceContext context, String key) {
        MustacheType type = types.get(key);

        if(type == null) {
            return MustacheType.UNKNOWN;
        }

        return type;
    }

}
